apply plugin: 'scala'
apply plugin: 'idea'

group 'org.project'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def akkaVersion = "2.6.14"
def akkaHttpVersion = "10.2.4"
def redisVersion = "3.30"

def versions = [
        ScalaBinary: "2.13"
]

dependencies {

    // Scala 
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.13.4'
    compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.13.4'

    // Akka
    implementation platform("com.typesafe.akka:akka-http-bom_${versions.ScalaBinary}:${akkaHttpVersion}")
    implementation "com.typesafe.akka:akka-http-spray-json_${versions.ScalaBinary}"
    implementation platform("com.typesafe.akka:akka-bom_${versions.ScalaBinary}:${akkaVersion}")
    implementation "com.typesafe.akka:akka-actor-typed_${versions.ScalaBinary}"

    implementation "com.typesafe.akka:akka-stream-kafka_${versions.ScalaBinary}:2.0.7"
    implementation "com.typesafe.akka:akka-actor-typed_${versions.ScalaBinary}:${akkaVersion}"
    implementation "com.typesafe.akka:akka-stream_${versions.ScalaBinary}:${akkaVersion}"
    implementation "com.typesafe.akka:akka-slf4j_${versions.ScalaBinary}:${akkaVersion}"

    // Redis-client
    implementation "net.debasishg:redisclient_${versions.ScalaBinary}:${redisVersion}"

    // Kafka-client
    implementation "org.apache.kafka:kafka-clients:2.7.0"

    // Jwt
    implementation "com.github.jwt-scala:jwt-spray-json_${versions.ScalaBinary}:7.1.3"


    compile "ch.qos.logback:logback-classic:1.1.3"
}
task run(type: JavaExec, dependsOn: classes) {
    main = 'org.project.Main'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}


jar {
    manifest {
        attributes 'Main-Class': 'Main'
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': '1.0',
                'Main-Class': 'Main'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task repl(type: JavaExec) {
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    args '-usejavacp'
}